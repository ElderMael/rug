import {EditProject} from "./ProjectEditor"
import {Instruction,HandleCommand} from "./Handlers"

/**
 * Build a plan instruction for the given decorated
 * editor, extracting its present property values, which
 * follow a convention, with names like __name
 * @param ed editor
 */
export function editWith(ed: EditProject): Instruction<"edit"> {
    return instruction(ed, "edit")
}

export function handleCommand(ed: HandleCommand): Instruction<"command"> {
    return instruction(ed, "command")
}

/**
 * Emit an instruction for the given operation type
 * @param op operation to emit instruction for
 * @param kind kind of the instruction, such as "edit"
 */
function instruction(op, kind) {
    let params = {}
    for (let param of op.__parameters) {
        params[param.name] = op[param.name]
    }
    return {
        kind: kind,
        name: op.__name,
        parameters: params,
    }
}