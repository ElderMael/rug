
/**
 * Superinterface for all worlds: Isolated contexts
 * available during scenario execution
 */
export interface ScenarioWorld {

    /**
     * Get the value of the given key in the scenario, or null
     */
    get(key: string): any

    /**
     * Bind the value to the given key in the scenario
     */
    put(key: string, what: any): void

    /**
     * Clear the value of the given key in the scenario
     */
    clear(key: string): void

    /**
     * Abort execution of the current scenario. This will cause failure.
     */
    abort(): void

    /**
     * Was execution of the current scenario aborted?
     */
    aborted(): boolean

    /**
     * Did the last operation fail due to invalid parameters?
     * Otherwise null
     */
    invalidParameters(): any

}
